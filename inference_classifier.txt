import pickle
import cv2
import mediapipe as mp
import numpy as np

# Load the trained model
model_dict = pickle.load(open('./model.p', 'rb'))
model = model_dict['model']

# Initialize camera capture
cap = cv2.VideoCapture(0)  # Use default camera index

# Initialize Mediapipe Hands module
mp_hands = mp.solutions.hands
mp_drawing = mp.solutions.drawing_utils
mp_drawing_styles = mp.solutions.drawing_styles

hands = mp_hands.Hands(static_image_mode=True, min_detection_confidence=0.3)

# Define label mappings
labels_dict = {0: 'A', 1: 'B', 2: 'C', 3:'D'}  # Update with your actual label mappings

while True:
    ret, frame = cap.read()

    if not ret:
        print("Error: Unable to capture frame.")
        continue  # Skip this iteration and continue to the next frame

    H, W, _ = frame.shape

    frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

    results = hands.process(frame_rgb)
    if results.multi_hand_landmarks:
        for hand_landmarks in results.multi_hand_landmarks:
            mp_drawing.draw_landmarks(
                frame,  # image to draw
                hand_landmarks,  # model output
                mp_hands.HAND_CONNECTIONS,  # hand connections
                mp_drawing_styles.get_default_hand_landmarks_style(),
                mp_drawing_styles.get_default_hand_connections_style())

        data_aux = []
        x_ = []
        y_ = []

        for hand_landmarks in results.multi_hand_landmarks:
            for i in range(len(hand_landmarks.landmark)):
                x = hand_landmarks.landmark[i].x
                y = hand_landmarks.landmark[i].y

                x_.append(x)
                y_.append(y)

        # Normalize hand landmarks and create feature vector
        if x_ and y_:
            min_x = min(x_)
            min_y = min(y_)
            for i in range(len(x_)):
                data_aux.append(x_[i] - min_x)
                data_aux.append(y_[i] - min_y)

            # Perform prediction
            prediction = model.predict([np.asarray(data_aux)])
            predicted_class_label = prediction[0]

            # Determine the predicted character
            if isinstance(predicted_class_label, str) and predicted_class_label.startswith('class_'):
                try:
                    predicted_class_index = int(predicted_class_label.split('_')[1])  # Extract index from 'class_0'
                    predicted_character = labels_dict.get(predicted_class_index, 'Unknown')
                except IndexError:
                    predicted_character = 'Unknown'
            else:
                predicted_character = labels_dict.get(int(predicted_class_label), 'Unknown')

            print("Predicted class index:", predicted_class_label)
            print("Predicted character:", predicted_character)

            # Draw bounding box and label on the frame
            x1 = int(min(x_) * W) - 10
            y1 = int(min(y_) * H) - 10
            x2 = int(max(x_) * W) - 10
            y2 = int(max(y_) * H) - 10

            cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 0, 0), 4)
            cv2.putText(frame, predicted_character, (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 1.3, (0, 0, 0), 3,
                        cv2.LINE_AA)

    # Display the frame
    cv2.imshow('frame', frame)

    # Exit loop when 'q' is pressed
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the camera and close all OpenCV windows
cap.release()
cv2.destroyAllWindows()
